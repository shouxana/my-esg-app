// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Gender {
  gender_id   String     @id
  gender      String
  employees   Employee[]

  @@map("Gender")
}

model Education {
  education_id String     @id
  education    String
  employees    Employee[]

  @@map("Education")
}

model MaritalStatus {
  marital_status_id String     @id
  marital_status    String
  employees         Employee[]

  @@map("MaritalStatus")
}

model Position {
  position_id String     @id
  position    String
  employees   Employee[]

  @@map("Position")
}

model ManagerialPosition {
  managerial_position_id String     @id
  managerial_position    String
  employees              Employee[]

  @@map("ManagerialPosition")
}

model EmployeeUpdateLog {
  id            Int      @id @default(autoincrement())
  employee_id   Int
  full_name     String
  changed_field String
  old_value     String
  new_value     String
  updated_at    DateTime @default(now())

  employee      Employee @relation(fields: [employee_id], references: [employee_id])

  @@map("EmployeeUpdateLog")
}

model Employee {
  employee_id            Int               @id @default(autoincrement())
  full_name             String
  employee_mail         String            @unique
  birth_date            DateTime
  employment_date       DateTime
  termination_date      DateTime?
  position_id           String
  education_id          String
  marital_status_id     String
  gender_id             String
  managerial_position_id String
  company               String
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt

  position            Position          @relation(fields: [position_id], references: [position_id])
  education           Education         @relation(fields: [education_id], references: [education_id])
  maritalStatus       MaritalStatus     @relation(fields: [marital_status_id], references: [marital_status_id])
  gender              Gender            @relation(fields: [gender_id], references: [gender_id])
  managerialPosition  ManagerialPosition @relation(fields: [managerial_position_id], references: [managerial_position_id])
  updateLogs          EmployeeUpdateLog[]

  @@map("Employee")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  company   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("User")
}